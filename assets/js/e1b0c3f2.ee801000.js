"use strict";(self.webpackChunkPREFS=self.webpackChunkPREFS||[]).push([[461],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(t),c=r,f=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return t?a.createElement(f,l(l({ref:n},m),{},{components:t})):a.createElement(f,l({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7142:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],o={id:"prefs",title:"Prefs class",sidebar_position:2,hide_title:!0},p="`Prefs` class",s={unversionedId:"api/prefs",id:"version-1.0.0/api/prefs",title:"Prefs class",description:"This class provides a dictionary-like inteface for the PrefsBase class.",source:"@site/versioned_docs/version-1.0.0/api/prefs.md",sourceDirName:"api",slug:"/api/prefs",permalink:"/PREFS/docs/api/prefs",editUrl:"https://github.com/Patitotective/PREFS/tree/main/website/versioned_docs/version-1.0.0/api/prefs.md",tags:[],version:"1.0.0",sidebarPosition:2,frontMatter:{id:"prefs",title:"Prefs class",sidebar_position:2,hide_title:!0},sidebar:"docs",previous:{title:"PREFS resources",permalink:"/PREFS/docs/resources"},next:{title:"Functions",permalink:"/PREFS/docs/api/functions"}},m=[{value:"Example",id:"example",children:[],level:2},{value:"Init",id:"init",children:[],level:2},{value:"Class Attributes",id:"class-attributes",children:[],level:2},{value:"Properties",id:"properties",children:[{value:"<code>content</code>",id:"content",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[{value:"<code>read()</code>",id:"read",children:[],level:3},{value:"<code>write()</code>",id:"write",children:[],level:3},{value:"<code>write_many()</code>",id:"write_many",children:[],level:3},{value:"<code>overwrite()</code>",id:"overwrite",children:[],level:3},{value:"<code>delete()</code>",id:"delete",children:[],level:3},{value:"<code>to_json()</code>",id:"to_json",children:[],level:3},{value:"<code>to_yaml()</code>",id:"to_yaml",children:[],level:3}],level:2}],d={toc:m};function u(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"prefs-class"},(0,i.kt)("inlineCode",{parentName:"h1"},"Prefs")," class"),(0,i.kt)("p",null,"This class provides a dictionary-like inteface for the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrefsBase")," class."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"PrefsBase")," is not documented but it's included here with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Prefs")," class"))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\ndefault_prefs = { \n    "lang": "en", \n    "theme": {\n        "background": "#199396", \n        "font": "UbuntuMono"\n    }\n}\n\nmy_prefs = prefs.Prefs(default_prefs)\n\nmy_prefs["lang"] = "es"\nprint(default_prefs)\n>>> \n{ \n    "lang": "es", \n    "theme": {\n        "background": "#199396", \n        "font": "UbuntuMono"\n    }\n}\n\n# Acess to nested keys\nmy_prefs["theme/background"] = "#953e68"\nprint(default_prefs)\n>>> \n{ \n    "lang": "es", \n    "theme": {\n        "background": "#953e68", \n        "font": "UbuntuMono"\n    }\n}\n\n# Remove keys\nmy_prefs.pop("lang")\nprint(default_prefs)\n>>> \n{ \n    "theme": {\n        "background": "#953e68", \n        "font": "UbuntuMono"\n    }\n}\n')),(0,i.kt)("p",null,"The supported dictionary methods are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"__str__# print(my_prefs)\n__repr__ # repr(my_prefs)\n__len__ # len(my_prefs)\n__delitem__ # del my_prefs[item]\n__getitem__ # my_prefs[item]\n__setitem__ # my_prefs[key] = val\n__contains__ # key in my_prefs\n__iter__ # for i in my_prefs\nkeys\nvalues\nitems\npop\nget\nhas_key\nclear\nupdate\npopitem\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Check ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict"},"https://docs.python.org/3/library/stdtypes.html#mapping-types-dict")," to see what those methods do."))),(0,i.kt)("h2",{id:"init"},"Init"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefs (Dict[str, any], callable)"),": A dictionary or a function that returns a dictionary to use as the default preferences."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'path (str="prefs.prefs")'),": The path of the ",(0,i.kt)("em",{parentName:"li"},"PREFS")," file.")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The default preferences are the ones ued the first time the program runs or whenever the files gets deleted.",(0,i.kt)("br",{parentName:"p"}),"\n","If any directory in the path doesn't exist, it will get created."))),(0,i.kt)("h2",{id:"class-attributes"},"Class Attributes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'FIRST_LINE = "#PREFS"\nSEPARATOR_CHAR = "="\nENDER_CHAR = "\\n"\nCONTINUER_CHAR = ">"\nCOMMENT_CHAR = "#"\nINDENT_CHAR = "\\t"\nKEY_PATH_SEP = "/"\nINVALID_KEY_CHARS = (SEPARATOR_CHAR, CONTINUER_CHAR, KEY_PATH_SEP)\nAUTO_GEN_KEYS = True\nSUPPORTED_TYPES = (int, float, str, list, set, dict, tuple, range, bytes, bool, NoneType)\n')),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("h3",{id:"content"},(0,i.kt)("inlineCode",{parentName:"h3"},"content")),(0,i.kt)("p",null,"Access the prefs file's content (by calling ",(0,i.kt)("a",{parentName:"p",href:"#read"},(0,i.kt)("inlineCode",{parentName:"a"},"read"))," method).",(0,i.kt)("br",{parentName:"p"}),"\n","Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"import prefs\n\ndefault_prefs = {\n    \"theme\": \"light\",\n    \"lang\": \"en\"\n}\n\nmy_prefs = prefs.Prefs(default_prefs)\n\nprint(prefs.content)\n>>> {'theme': 'light', 'lang': 'en'}\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"read"},(0,i.kt)("inlineCode",{parentName:"h3"},"read()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"read() -> dict\n")),(0,i.kt)("p",null,"Reads the prefs file and returns it's content."),(0,i.kt)("p",null,"Parameters: doesn't require any arguments.",(0,i.kt)("br",{parentName:"p"}),"\n","Returns: a dictionary."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"import prefs\n\nmy_prefs = prefs.Prefs({ \n        \"lang\": \"en\", \n        \"theme\": {\n            \"background\": \"#199396\", \n            \"font\": \"UbuntuMono\"\n        }\n    }\n)\n\n\nprint(my_prefs.read())\n\n>>> {'lang': 'en', 'theme': {'background': '#199396', 'font': 'UbuntuMono'}}\n")),(0,i.kt)("h3",{id:"write"},(0,i.kt)("inlineCode",{parentName:"h3"},"write()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"write(key: str, val: any) -> None\n")),(0,i.kt)("p",null,"Changes the given key to the given value and updates the prefs file."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key (str)"),": The key to change."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"val (any)"),": The value to assign.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nprint(my_prefs["lang"])\n>>> en\n\nmy_prefs.write("lang", "es")\n\nprint(my_prefs["lang"])\n>>> es\n')),(0,i.kt)("p",null,"To change the value of a nested key, you need to give it a path of keys to find the value you want.\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nprint(my_prefs["theme"])\n>>> {\'background\': \'#199396\', \'font\': \'UbuntuMono\'}\n\nmy_prefs.write("theme/background", "#953e68")\n\nprint(my_prefs["theme"])\n>>> {\'background\': \'#953e68\', \'font\': \'UbuntuMono\'}\n')),(0,i.kt)("h3",{id:"write_many"},(0,i.kt)("inlineCode",{parentName:"h3"},"write_many()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"write_many(items: Dict[str, any]) -> None\n")),(0,i.kt)("p",null,"To efficiently write multiple prefs at once (by opening the file just once)."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"items (Dict[str, any])"),": A dictionary with the prefs to change.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nmy_prefs.write_many({"theme/background": "#953e68", "theme/font": "AllerDisplay"})\n\nprint(my_prefs["theme"])\n>>> \n"theme": {\n    "background": "#953e68", \n    "font": "AllerDisplay"\n}\n')),(0,i.kt)("h3",{id:"overwrite"},(0,i.kt)("inlineCode",{parentName:"h3"},"overwrite()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"overwrite(prefs: dict=None, key: str=None) -> None\n")),(0,i.kt)("p",null,"Overwrites the prefs file with the default prefs or with the given prefs.\nIf the ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," parameter is given, overwrite that key."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefs (dict=None)"),": A dictionary to overwrites the prefs with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key (str=None)"),": A key to overwrite.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nmy_prefs["lang"] = "es"\n\nprint(my_prefs["lang"])\n>>> \'es\'\n\nmy_prefs.overwrite(key="lang") # If key is not given, it will overwrite the whole prefs\n\nprint(my_prefs["lang"])\n>>> \'en\' # The default value\n')),(0,i.kt)("h3",{id:"delete"},(0,i.kt)("inlineCode",{parentName:"h3"},"delete()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"delete() -> None\n")),(0,i.kt)("p",null,"Deletes the prefs file."),(0,i.kt)("p",null,"Parameters: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),".\nReturns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nmy_prefs.delete()\nprint(my_prefs["lang"])\n')),(0,i.kt)("p",null,"The above code will raise a ",(0,i.kt)("inlineCode",{parentName:"p"},"FileNotFoundError")," since the prefs file got deleted.\nIf we remove the line where we delete the prefs file and run the code again, it will work, because ",(0,i.kt)("em",{parentName:"p"},"PREFS")," creates the prefs file at init if it is not found."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you want to create the prefs file again after deleting it without rerunning the program, you can do:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-py"},"my_prefs.create() # Not documented\n")))),(0,i.kt)("h3",{id:"to_json"},(0,i.kt)("inlineCode",{parentName:"h3"},"to_json()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"to_json(self, path: str=None, **kwargs) -> None\n")),(0,i.kt)("p",null,"Converts the prefs file into a JSON file."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path (str=None)"),": The output path, by default the ",(0,i.kt)("a",{parentName:"li",href:"#init"},(0,i.kt)("inlineCode",{parentName:"a"},"path"))," with the ",(0,i.kt)("inlineCode",{parentName:"li"},".json")," extension."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"**kwargs"),": This keyword arguments will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"json.dump")," function, in case you want certain configuration.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nmy_prefs.to_json()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="prefs.json"',title:'"prefs.json"'},'{"lang": "en", "theme": {"background": "#199396", "font": "UbuntuMono"}}\n')),(0,i.kt)("h3",{id:"to_yaml"},(0,i.kt)("inlineCode",{parentName:"h3"},"to_yaml()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},"to_yaml(self, path: str=None, **kwargs) -> None\n")),(0,i.kt)("p",null,"Converts the prefs file into a YAML file."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path (str=None)"),": The output path, by default the ",(0,i.kt)("a",{parentName:"li",href:"#init"},(0,i.kt)("inlineCode",{parentName:"a"},"path"))," with the ",(0,i.kt)("inlineCode",{parentName:"li"},".json")," extension."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"**kwargs"),": This keyword arguments will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml.dump")," function, in case you want certain configuration.")),(0,i.kt)("p",null,"Returns: ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py"},'import prefs\n\nmy_prefs = prefs.Prefs({ \n        "lang": "en", \n        "theme": {\n            "background": "#199396", \n            "font": "UbuntuMono"\n        }\n    }\n)\n\nmy_prefs.to_yaml()\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="prefs.yaml"',title:'"prefs.yaml"'},"lang: en\ntheme:\n  background: '#199396'\n  font: UbuntuMono\n")))}u.isMDXComponent=!0}}]);